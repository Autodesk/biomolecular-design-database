'use strict';

exports.__esModule = true;
exports.pushQuery = pushQuery;
exports.pushAdditional = pushAdditional;

var _lodash = require('lodash');

// Push a new query onto the compiled "sequence" stack,
// creating a new formatter, returning the compiler.

function pushQuery(query) {
  if (!query) return;
  if (_lodash.isString(query)) {
    query = { sql: query };
  }
  if (!query.bindings) {
    query.bindings = this.formatter.bindings;
  }
  this.sequence.push(query);
  this.formatter = this.client.formatter();
}

// Used in cases where we need to push some additional column specific statements.

function pushAdditional(fn) {
  var child = new this.constructor(this.client, this.tableCompiler, this.columnBuilder);
  fn.call(child, _lodash.tail(arguments));
  this.sequence.additional = (this.sequence.additional || []).concat(child.sequence);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7c0JBQytCLFFBQVE7Ozs7O0FBSWhDLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRTtBQUMvQixNQUFJLENBQUMsS0FBSyxFQUFFLE9BQU87QUFDbkIsTUFBSSxpQkFBUyxLQUFLLENBQUMsRUFBRTtBQUNuQixTQUFLLEdBQUcsRUFBQyxHQUFHLEVBQUUsS0FBSyxFQUFDLENBQUM7R0FDdEI7QUFDRCxNQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRTtBQUNuQixTQUFLLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0dBQzFDO0FBQ0QsTUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUIsTUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFDO0NBQzFDOzs7O0FBR00sU0FBUyxjQUFjLENBQUMsRUFBRSxFQUFFO0FBQ2pDLE1BQU0sS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ3hGLElBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGFBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNoQyxNQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQSxDQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDcEYiLCJmaWxlIjoiaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgaXNTdHJpbmcsIHRhaWwgfSBmcm9tICdsb2Rhc2gnXG5cbi8vIFB1c2ggYSBuZXcgcXVlcnkgb250byB0aGUgY29tcGlsZWQgXCJzZXF1ZW5jZVwiIHN0YWNrLFxuLy8gY3JlYXRpbmcgYSBuZXcgZm9ybWF0dGVyLCByZXR1cm5pbmcgdGhlIGNvbXBpbGVyLlxuZXhwb3J0IGZ1bmN0aW9uIHB1c2hRdWVyeShxdWVyeSkge1xuICBpZiAoIXF1ZXJ5KSByZXR1cm47XG4gIGlmIChpc1N0cmluZyhxdWVyeSkpIHtcbiAgICBxdWVyeSA9IHtzcWw6IHF1ZXJ5fTtcbiAgfVxuICBpZiAoIXF1ZXJ5LmJpbmRpbmdzKSB7XG4gICAgcXVlcnkuYmluZGluZ3MgPSB0aGlzLmZvcm1hdHRlci5iaW5kaW5ncztcbiAgfVxuICB0aGlzLnNlcXVlbmNlLnB1c2gocXVlcnkpO1xuICB0aGlzLmZvcm1hdHRlciA9IHRoaXMuY2xpZW50LmZvcm1hdHRlcigpO1xufVxuXG4vLyBVc2VkIGluIGNhc2VzIHdoZXJlIHdlIG5lZWQgdG8gcHVzaCBzb21lIGFkZGl0aW9uYWwgY29sdW1uIHNwZWNpZmljIHN0YXRlbWVudHMuXG5leHBvcnQgZnVuY3Rpb24gcHVzaEFkZGl0aW9uYWwoZm4pIHtcbiAgY29uc3QgY2hpbGQgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmNsaWVudCwgdGhpcy50YWJsZUNvbXBpbGVyLCB0aGlzLmNvbHVtbkJ1aWxkZXIpO1xuICBmbi5jYWxsKGNoaWxkLCB0YWlsKGFyZ3VtZW50cykpO1xuICB0aGlzLnNlcXVlbmNlLmFkZGl0aW9uYWwgPSAodGhpcy5zZXF1ZW5jZS5hZGRpdGlvbmFsIHx8IFtdKS5jb25jYXQoY2hpbGQuc2VxdWVuY2UpO1xufVxuIl19