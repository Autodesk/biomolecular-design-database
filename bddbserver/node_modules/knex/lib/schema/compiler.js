'use strict';

exports.__esModule = true;

var _helpers = require('./helpers');

var _lodash = require('lodash');

// The "SchemaCompiler" takes all of the query statements which have been
// gathered in the "SchemaBuilder" and turns them into an array of
// properly formatted / bound query strings.
function SchemaCompiler(client, builder) {
  this.builder = builder;
  this.client = client;
  this.schema = builder._schema;
  this.formatter = client.formatter();
  this.sequence = [];
}

_lodash.assign(SchemaCompiler.prototype, {

  pushQuery: _helpers.pushQuery,

  pushAdditional: _helpers.pushAdditional,

  createTable: buildTable('create'),

  createTableIfNotExists: buildTable('createIfNot'),

  alterTable: buildTable('alter'),

  dropTablePrefix: 'drop table ',

  dropTable: function dropTable(tableName) {
    this.pushQuery(this.dropTablePrefix + this.formatter.wrap(prefixedTableName(this.schema, tableName)));
  },

  dropTableIfExists: function dropTableIfExists(tableName) {
    this.pushQuery(this.dropTablePrefix + 'if exists ' + this.formatter.wrap(prefixedTableName(this.schema, tableName)));
  },

  raw: function raw(sql, bindings) {
    this.sequence.push(this.client.raw(sql, bindings).toSQL());
  },

  toSQL: function toSQL() {
    var sequence = this.builder._sequence;
    for (var i = 0, l = sequence.length; i < l; i++) {
      var query = sequence[i];
      this[query.method].apply(this, query.args);
    }
    return this.sequence;
  }

});

function buildTable(type) {
  return function (tableName, fn) {
    var builder = this.client.tableBuilder(type, tableName, fn);

    builder.setSchema(this.schema);
    var sql = builder.toSQL();

    for (var i = 0, l = sql.length; i < l; i++) {
      this.sequence.push(sql[i]);
    }
  };
}

function prefixedTableName(prefix, table) {
  return prefix ? prefix + '.' + table : table;
}

exports['default'] = SchemaCompiler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozt1QkFDMEMsV0FBVzs7c0JBRTlCLFFBQVE7Ozs7O0FBSy9CLFNBQVMsY0FBYyxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUU7QUFDdkMsTUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7QUFDdEIsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUE7QUFDcEIsTUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsRUFBRSxDQUFBO0FBQ25DLE1BQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO0NBQ25COztBQUVELGVBQU8sY0FBYyxDQUFDLFNBQVMsRUFBRTs7QUFFL0IsV0FBUyxvQkFBVzs7QUFFcEIsZ0JBQWMseUJBQWdCOztBQUU5QixhQUFXLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQzs7QUFFakMsd0JBQXNCLEVBQUUsVUFBVSxDQUFDLGFBQWEsQ0FBQzs7QUFFakQsWUFBVSxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUM7O0FBRS9CLGlCQUFlLEVBQUUsYUFBYTs7QUFFOUIsV0FBUyxFQUFBLG1CQUFDLFNBQVMsRUFBRTtBQUNuQixRQUFJLENBQUMsU0FBUyxDQUNaLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUN0RixDQUFDO0dBQ0g7O0FBRUQsbUJBQWlCLEVBQUEsMkJBQUMsU0FBUyxFQUFFO0FBQzNCLFFBQUksQ0FBQyxTQUFTLENBQ1osSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLEdBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FDL0QsQ0FBQztHQUNIOztBQUVELEtBQUcsRUFBQSxhQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUU7QUFDakIsUUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7R0FDNUQ7O0FBRUQsT0FBSyxFQUFBLGlCQUFHO0FBQ04sUUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDeEMsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMvQyxVQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsVUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM1QztBQUNELFdBQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztHQUN0Qjs7Q0FFRixDQUFDLENBQUE7O0FBRUYsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFO0FBQ3hCLFNBQU8sVUFBUyxTQUFTLEVBQUUsRUFBRSxFQUFFO0FBQzdCLFFBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7O0FBRTlELFdBQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQy9CLFFBQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7QUFFNUIsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMxQyxVQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUM1QjtHQUNGLENBQUM7Q0FDSDs7QUFFRCxTQUFTLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUU7QUFDeEMsU0FBTyxNQUFNLEdBQU0sTUFBTSxTQUFJLEtBQUssR0FBSyxLQUFLLENBQUM7Q0FDOUM7O3FCQUVjLGNBQWMiLCJmaWxlIjoiY29tcGlsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IHB1c2hRdWVyeSwgcHVzaEFkZGl0aW9uYWwgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICdsb2Rhc2gnXG5cbi8vIFRoZSBcIlNjaGVtYUNvbXBpbGVyXCIgdGFrZXMgYWxsIG9mIHRoZSBxdWVyeSBzdGF0ZW1lbnRzIHdoaWNoIGhhdmUgYmVlblxuLy8gZ2F0aGVyZWQgaW4gdGhlIFwiU2NoZW1hQnVpbGRlclwiIGFuZCB0dXJucyB0aGVtIGludG8gYW4gYXJyYXkgb2Zcbi8vIHByb3Blcmx5IGZvcm1hdHRlZCAvIGJvdW5kIHF1ZXJ5IHN0cmluZ3MuXG5mdW5jdGlvbiBTY2hlbWFDb21waWxlcihjbGllbnQsIGJ1aWxkZXIpIHtcbiAgdGhpcy5idWlsZGVyID0gYnVpbGRlclxuICB0aGlzLmNsaWVudCA9IGNsaWVudFxuICB0aGlzLnNjaGVtYSA9IGJ1aWxkZXIuX3NjaGVtYTtcbiAgdGhpcy5mb3JtYXR0ZXIgPSBjbGllbnQuZm9ybWF0dGVyKClcbiAgdGhpcy5zZXF1ZW5jZSA9IFtdXG59XG5cbmFzc2lnbihTY2hlbWFDb21waWxlci5wcm90b3R5cGUsIHtcblxuICBwdXNoUXVlcnk6IHB1c2hRdWVyeSxcblxuICBwdXNoQWRkaXRpb25hbDogcHVzaEFkZGl0aW9uYWwsXG5cbiAgY3JlYXRlVGFibGU6IGJ1aWxkVGFibGUoJ2NyZWF0ZScpLFxuXG4gIGNyZWF0ZVRhYmxlSWZOb3RFeGlzdHM6IGJ1aWxkVGFibGUoJ2NyZWF0ZUlmTm90JyksXG5cbiAgYWx0ZXJUYWJsZTogYnVpbGRUYWJsZSgnYWx0ZXInKSxcblxuICBkcm9wVGFibGVQcmVmaXg6ICdkcm9wIHRhYmxlICcsXG5cbiAgZHJvcFRhYmxlKHRhYmxlTmFtZSkge1xuICAgIHRoaXMucHVzaFF1ZXJ5KFxuICAgICAgdGhpcy5kcm9wVGFibGVQcmVmaXggKyB0aGlzLmZvcm1hdHRlci53cmFwKHByZWZpeGVkVGFibGVOYW1lKHRoaXMuc2NoZW1hLCB0YWJsZU5hbWUpKVxuICAgICk7XG4gIH0sXG5cbiAgZHJvcFRhYmxlSWZFeGlzdHModGFibGVOYW1lKSB7XG4gICAgdGhpcy5wdXNoUXVlcnkoXG4gICAgICB0aGlzLmRyb3BUYWJsZVByZWZpeCArICdpZiBleGlzdHMgJyArXG4gICAgICB0aGlzLmZvcm1hdHRlci53cmFwKHByZWZpeGVkVGFibGVOYW1lKHRoaXMuc2NoZW1hLCB0YWJsZU5hbWUpKVxuICAgICk7XG4gIH0sXG5cbiAgcmF3KHNxbCwgYmluZGluZ3MpIHtcbiAgICB0aGlzLnNlcXVlbmNlLnB1c2godGhpcy5jbGllbnQucmF3KHNxbCwgYmluZGluZ3MpLnRvU1FMKCkpO1xuICB9LFxuXG4gIHRvU1FMKCkge1xuICAgIGNvbnN0IHNlcXVlbmNlID0gdGhpcy5idWlsZGVyLl9zZXF1ZW5jZTtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNlcXVlbmNlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgY29uc3QgcXVlcnkgPSBzZXF1ZW5jZVtpXTtcbiAgICAgIHRoaXNbcXVlcnkubWV0aG9kXS5hcHBseSh0aGlzLCBxdWVyeS5hcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2VxdWVuY2U7XG4gIH1cblxufSlcblxuZnVuY3Rpb24gYnVpbGRUYWJsZSh0eXBlKSB7XG4gIHJldHVybiBmdW5jdGlvbih0YWJsZU5hbWUsIGZuKSB7XG4gICAgY29uc3QgYnVpbGRlciA9IHRoaXMuY2xpZW50LnRhYmxlQnVpbGRlcih0eXBlLCB0YWJsZU5hbWUsIGZuKTtcblxuICAgIGJ1aWxkZXIuc2V0U2NoZW1hKHRoaXMuc2NoZW1hKTtcbiAgICBjb25zdCBzcWwgPSBidWlsZGVyLnRvU1FMKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNxbC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHRoaXMuc2VxdWVuY2UucHVzaChzcWxbaV0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJlZml4ZWRUYWJsZU5hbWUocHJlZml4LCB0YWJsZSkge1xuICByZXR1cm4gcHJlZml4ID8gYCR7cHJlZml4fS4ke3RhYmxlfWAgOiB0YWJsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2NoZW1hQ29tcGlsZXI7XG4iXX0=