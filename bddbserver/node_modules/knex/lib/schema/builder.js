'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inherits = require('inherits');

var _inherits2 = _interopRequireDefault(_inherits);

var _events = require('events');

var _lodash = require('lodash');

// Constructor for the builder instance, typically called from
// `knex.builder`, accepting the current `knex` instance,
// and pulling out the `client` and `grammar` from the current
// knex instance.
function SchemaBuilder(client) {
  this.client = client;
  this._sequence = [];
  this._debug = client.config && client.config.debug;
}
_inherits2['default'](SchemaBuilder, _events.EventEmitter);

// Each of the schema builder methods just add to the
// "_sequence" array for consistency.
_lodash.each(['createTable', 'createTableIfNotExists', 'createSchema', 'createSchemaIfNotExists', 'dropSchema', 'dropSchemaIfExists', 'createExtension', 'createExtensionIfNotExists', 'dropExtension', 'dropExtensionIfExists', 'table', 'alterTable', 'hasTable', 'hasColumn', 'dropTable', 'renameTable', 'dropTableIfExists', 'raw'], function (method) {
  SchemaBuilder.prototype[method] = function () {
    if (method === 'table') method = 'alterTable';
    this._sequence.push({
      method: method,
      args: _lodash.toArray(arguments)
    });
    return this;
  };
});

require('../interface')(SchemaBuilder);

SchemaBuilder.prototype.withSchema = function (schemaName) {
  this._schema = schemaName;
  return this;
};

SchemaBuilder.prototype.toString = function () {
  return this.toQuery();
};

SchemaBuilder.prototype.toSQL = function () {
  return this.client.schemaCompiler(this).toSQL();
};

exports['default'] = SchemaBuilder;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY2hlbWEvYnVpbGRlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7d0JBQ3FCLFVBQVU7Ozs7c0JBQ0YsUUFBUTs7c0JBQ1AsUUFBUTs7Ozs7O0FBTXRDLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRTtBQUM3QixNQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQTtBQUNwQixNQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQTtBQUNuQixNQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUE7Q0FDbkQ7QUFDRCxzQkFBUyxhQUFhLHVCQUFlLENBQUE7Ozs7QUFJckMsYUFBSyxDQUNILGFBQWEsRUFDYix3QkFBd0IsRUFDeEIsY0FBYyxFQUNkLHlCQUF5QixFQUN6QixZQUFZLEVBQ1osb0JBQW9CLEVBQ3BCLGlCQUFpQixFQUNqQiw0QkFBNEIsRUFDNUIsZUFBZSxFQUNmLHVCQUF1QixFQUN2QixPQUFPLEVBQ1AsWUFBWSxFQUNaLFVBQVUsRUFDVixXQUFXLEVBQ1gsV0FBVyxFQUNYLGFBQWEsRUFDYixtQkFBbUIsRUFDbkIsS0FBSyxDQUNOLEVBQUUsVUFBUyxNQUFNLEVBQUU7QUFDbEIsZUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxZQUFXO0FBQzNDLFFBQUksTUFBTSxLQUFLLE9BQU8sRUFBRSxNQUFNLEdBQUcsWUFBWSxDQUFDO0FBQzlDLFFBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2xCLFlBQU0sRUFBTixNQUFNO0FBQ04sVUFBSSxFQUFFLGdCQUFRLFNBQVMsQ0FBQztLQUN6QixDQUFDLENBQUM7QUFDSCxXQUFPLElBQUksQ0FBQztHQUNiLENBQUE7Q0FDRixDQUFDLENBQUE7O0FBRUYsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBOztBQUV0QyxhQUFhLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFTLFVBQVUsRUFBRTtBQUN4RCxNQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztBQUMxQixTQUFPLElBQUksQ0FBQztDQUNiLENBQUE7O0FBRUQsYUFBYSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsWUFBVztBQUM1QyxTQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtDQUN0QixDQUFBOztBQUVELGFBQWEsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFlBQVc7QUFDekMsU0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtDQUNoRCxDQUFBOztxQkFFYyxhQUFhIiwiZmlsZSI6ImJ1aWxkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBpbmhlcml0cyBmcm9tICdpbmhlcml0cyc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHsgZWFjaCwgdG9BcnJheSB9IGZyb20gJ2xvZGFzaCdcblxuLy8gQ29uc3RydWN0b3IgZm9yIHRoZSBidWlsZGVyIGluc3RhbmNlLCB0eXBpY2FsbHkgY2FsbGVkIGZyb21cbi8vIGBrbmV4LmJ1aWxkZXJgLCBhY2NlcHRpbmcgdGhlIGN1cnJlbnQgYGtuZXhgIGluc3RhbmNlLFxuLy8gYW5kIHB1bGxpbmcgb3V0IHRoZSBgY2xpZW50YCBhbmQgYGdyYW1tYXJgIGZyb20gdGhlIGN1cnJlbnRcbi8vIGtuZXggaW5zdGFuY2UuXG5mdW5jdGlvbiBTY2hlbWFCdWlsZGVyKGNsaWVudCkge1xuICB0aGlzLmNsaWVudCA9IGNsaWVudFxuICB0aGlzLl9zZXF1ZW5jZSA9IFtdXG4gIHRoaXMuX2RlYnVnID0gY2xpZW50LmNvbmZpZyAmJiBjbGllbnQuY29uZmlnLmRlYnVnXG59XG5pbmhlcml0cyhTY2hlbWFCdWlsZGVyLCBFdmVudEVtaXR0ZXIpXG5cbi8vIEVhY2ggb2YgdGhlIHNjaGVtYSBidWlsZGVyIG1ldGhvZHMganVzdCBhZGQgdG8gdGhlXG4vLyBcIl9zZXF1ZW5jZVwiIGFycmF5IGZvciBjb25zaXN0ZW5jeS5cbmVhY2goW1xuICAnY3JlYXRlVGFibGUnLFxuICAnY3JlYXRlVGFibGVJZk5vdEV4aXN0cycsXG4gICdjcmVhdGVTY2hlbWEnLFxuICAnY3JlYXRlU2NoZW1hSWZOb3RFeGlzdHMnLFxuICAnZHJvcFNjaGVtYScsXG4gICdkcm9wU2NoZW1hSWZFeGlzdHMnLFxuICAnY3JlYXRlRXh0ZW5zaW9uJyxcbiAgJ2NyZWF0ZUV4dGVuc2lvbklmTm90RXhpc3RzJyxcbiAgJ2Ryb3BFeHRlbnNpb24nLFxuICAnZHJvcEV4dGVuc2lvbklmRXhpc3RzJyxcbiAgJ3RhYmxlJyxcbiAgJ2FsdGVyVGFibGUnLFxuICAnaGFzVGFibGUnLFxuICAnaGFzQ29sdW1uJyxcbiAgJ2Ryb3BUYWJsZScsXG4gICdyZW5hbWVUYWJsZScsXG4gICdkcm9wVGFibGVJZkV4aXN0cycsXG4gICdyYXcnXG5dLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgU2NoZW1hQnVpbGRlci5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmIChtZXRob2QgPT09ICd0YWJsZScpIG1ldGhvZCA9ICdhbHRlclRhYmxlJztcbiAgICB0aGlzLl9zZXF1ZW5jZS5wdXNoKHtcbiAgICAgIG1ldGhvZCxcbiAgICAgIGFyZ3M6IHRvQXJyYXkoYXJndW1lbnRzKVxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59KVxuXG5yZXF1aXJlKCcuLi9pbnRlcmZhY2UnKShTY2hlbWFCdWlsZGVyKVxuXG5TY2hlbWFCdWlsZGVyLnByb3RvdHlwZS53aXRoU2NoZW1hID0gZnVuY3Rpb24oc2NoZW1hTmFtZSkge1xuICB0aGlzLl9zY2hlbWEgPSBzY2hlbWFOYW1lO1xuICByZXR1cm4gdGhpcztcbn1cblxuU2NoZW1hQnVpbGRlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMudG9RdWVyeSgpXG59XG5cblNjaGVtYUJ1aWxkZXIucHJvdG90eXBlLnRvU1FMID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmNsaWVudC5zY2hlbWFDb21waWxlcih0aGlzKS50b1NRTCgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjaGVtYUJ1aWxkZXJcbiJdfQ==