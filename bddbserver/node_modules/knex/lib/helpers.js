/* eslint no-console:0 */

'use strict';

exports.__esModule = true;
exports.skim = skim;
exports.normalizeArr = normalizeArr;
exports.debugLog = debugLog;
exports.error = error;
exports.deprecate = deprecate;
exports.warn = warn;
exports.exit = exit;
exports.containsUndefined = containsUndefined;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _lodash = require('lodash');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

// Pick off the attributes from only the current layer of the object.

function skim(data) {
  return _lodash.map(data, function (obj) {
    return _lodash.pick(obj, _lodash.keys(obj));
  });
}

// Check if the first argument is an array, otherwise uses all arguments as an
// array.

function normalizeArr() {
  var args = new Array(arguments.length);
  for (var i = 0; i < args.length; i++) {
    args[i] = arguments[i];
  }
  if (Array.isArray(args[0])) {
    return args[0];
  }
  return args;
}

function debugLog(msg) {
  console.log(msg);
}

function error(msg) {
  console.log(_chalk2['default'].red('Knex:Error ' + msg));
}

// Used to signify deprecated functionality.

function deprecate(method, alternate) {
  warn(method + ' is deprecated, please use ' + alternate);
}

// Used to warn about incorrect use, without error'ing

function warn(msg) {
  console.log(_chalk2['default'].yellow('Knex:warning - ' + msg));
}

function exit(msg) {
  console.log(_chalk2['default'].red(msg));
  process.exit(1);
}

function containsUndefined(mixed) {
  var argContainsUndefined = false;

  if (_lodash.isTypedArray(mixed)) return false;

  if (mixed && _lodash.isFunction(mixed.toSQL)) {
    //Any QueryBuilder or Raw will automatically be validated during compile.
    return argContainsUndefined;
  }

  if (_lodash.isArray(mixed)) {
    for (var i = 0; i < mixed.length; i++) {
      if (argContainsUndefined) break;
      argContainsUndefined = this.containsUndefined(mixed[i]);
    }
  } else if (_lodash.isObject(mixed)) {
    for (var key in mixed) {
      if (argContainsUndefined) break;
      argContainsUndefined = this.containsUndefined(mixed[key]);
    }
  } else {
    argContainsUndefined = _lodash.isUndefined(mixed);
  }

  return argContainsUndefined;
}
//# sourceMappingURL=data:application/json;base64,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anMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tY29uc29sZTowICovXG5cbmltcG9ydCB7IG1hcCwgcGljaywga2V5cywgaXNGdW5jdGlvbiwgaXNVbmRlZmluZWQsIGlzT2JqZWN0LCBpc0FycmF5LCBpc1R5cGVkQXJyYXkgfSBmcm9tICdsb2Rhc2gnXG5pbXBvcnQgY2hhbGsgZnJvbSAnY2hhbGsnO1xuXG4vLyBQaWNrIG9mZiB0aGUgYXR0cmlidXRlcyBmcm9tIG9ubHkgdGhlIGN1cnJlbnQgbGF5ZXIgb2YgdGhlIG9iamVjdC5cbmV4cG9ydCBmdW5jdGlvbiBza2ltKGRhdGEpIHtcbiAgcmV0dXJuIG1hcChkYXRhLCAob2JqKSA9PiBwaWNrKG9iaiwga2V5cyhvYmopKSk7XG59XG5cbi8vIENoZWNrIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhbiBhcnJheSwgb3RoZXJ3aXNlIHVzZXMgYWxsIGFyZ3VtZW50cyBhcyBhblxuLy8gYXJyYXkuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplQXJyKCkge1xuICBjb25zdCBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgcmV0dXJuIGFyZ3NbMF07XG4gIH1cbiAgcmV0dXJuIGFyZ3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z0xvZyhtc2cpIHtcbiAgY29uc29sZS5sb2cobXNnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yKG1zZykge1xuICBjb25zb2xlLmxvZyhjaGFsay5yZWQoYEtuZXg6RXJyb3IgJHttc2d9YCkpXG59XG5cbiAgLy8gVXNlZCB0byBzaWduaWZ5IGRlcHJlY2F0ZWQgZnVuY3Rpb25hbGl0eS5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUobWV0aG9kLCBhbHRlcm5hdGUpIHtcbiAgd2FybihgJHttZXRob2R9IGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgJHthbHRlcm5hdGV9YCk7XG59XG5cbiAgLy8gVXNlZCB0byB3YXJuIGFib3V0IGluY29ycmVjdCB1c2UsIHdpdGhvdXQgZXJyb3InaW5nXG5leHBvcnQgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgY29uc29sZS5sb2coY2hhbGsueWVsbG93KGBLbmV4Ondhcm5pbmcgLSAke21zZ31gKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4aXQobXNnKSB7XG4gIGNvbnNvbGUubG9nKGNoYWxrLnJlZChtc2cpKVxuICBwcm9jZXNzLmV4aXQoMSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnRhaW5zVW5kZWZpbmVkKG1peGVkKSB7XG4gIGxldCBhcmdDb250YWluc1VuZGVmaW5lZCA9IGZhbHNlO1xuXG4gIGlmIChpc1R5cGVkQXJyYXkobWl4ZWQpKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZihtaXhlZCAmJiBpc0Z1bmN0aW9uKG1peGVkLnRvU1FMKSkge1xuICAgIC8vQW55IFF1ZXJ5QnVpbGRlciBvciBSYXcgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIHZhbGlkYXRlZCBkdXJpbmcgY29tcGlsZS5cbiAgICByZXR1cm4gYXJnQ29udGFpbnNVbmRlZmluZWQ7XG4gIH1cblxuICBpZihpc0FycmF5KG1peGVkKSkge1xuICAgIGZvcihsZXQgaSA9IDA7IGkgPCBtaXhlZC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYoYXJnQ29udGFpbnNVbmRlZmluZWQpIGJyZWFrO1xuICAgICAgYXJnQ29udGFpbnNVbmRlZmluZWQgPSB0aGlzLmNvbnRhaW5zVW5kZWZpbmVkKG1peGVkW2ldKTtcbiAgICB9XG4gIH0gZWxzZSBpZihpc09iamVjdChtaXhlZCkpIHtcbiAgICBmb3IoY29uc3Qga2V5IGluIG1peGVkKSB7XG4gICAgICBpZihhcmdDb250YWluc1VuZGVmaW5lZCkgYnJlYWs7XG4gICAgICBhcmdDb250YWluc1VuZGVmaW5lZCA9IHRoaXMuY29udGFpbnNVbmRlZmluZWQobWl4ZWRba2V5XSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFyZ0NvbnRhaW5zVW5kZWZpbmVkID0gaXNVbmRlZmluZWQobWl4ZWQpO1xuICB9XG5cbiAgcmV0dXJuIGFyZ0NvbnRhaW5zVW5kZWZpbmVkO1xufSJdfQ==