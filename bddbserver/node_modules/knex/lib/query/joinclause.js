'use strict';

exports.__esModule = true;

var _lodash = require('lodash');

// JoinClause
// -------

// The "JoinClause" is an object holding any necessary info about a join,
// including the type, and any associated tables & columns being joined.
function JoinClause(table, type, schema) {
  this.schema = schema;
  this.table = table;
  this.joinType = type;
  this.and = this;
  this.clauses = [];
}

_lodash.assign(JoinClause.prototype, {

  grouping: 'join',

  // Adds an "on" clause to the current join object.
  on: function on(first, operator, second) {
    if (typeof first === 'function') {
      this.clauses.push({
        type: 'onWrapped',
        value: first,
        bool: this._bool()
      });
      return this;
    }

    var data = undefined;
    var bool = this._bool();
    switch (arguments.length) {
      case 1:
        {
          if (typeof first === 'object' && typeof first.toSQL !== 'function') {
            var keys = Object.keys(first);
            var i = -1;
            var method = bool === 'or' ? 'orOn' : 'on';
            while (++i < keys.length) {
              this[method](keys[i], first[keys[i]]);
            }
            return this;
          } else {
            data = { type: 'onRaw', value: first, bool: bool };
          }
          break;
        }
      case 2:
        data = { type: 'onBasic', column: first, operator: '=', value: operator, bool: bool };break;
      default:
        data = { type: 'onBasic', column: first, operator: operator, value: second, bool: bool };
    }
    this.clauses.push(data);
    return this;
  },

  // Adds a "using" clause to the current join.
  using: function using(column) {
    return this.clauses.push({ type: 'onUsing', column: column, bool: this._bool() });
  },

  // Adds an "and on" clause to the current join object.
  andOn: function andOn() {
    return this.on.apply(this, arguments);
  },

  // Adds an "or on" clause to the current join object.
  orOn: function orOn(first, operator, second) {
    return this._bool('or').on.apply(this, arguments);
  },

  // Explicitly set the type of join, useful within a function when creating a grouped join.
  type: function type(_type) {
    this.joinType = _type;
    return this;
  },

  _bool: function _bool(bool) {
    if (arguments.length === 1) {
      this._boolFlag = bool;
      return this;
    }
    var ret = this._boolFlag || 'and';
    this._boolFlag = 'and';
    return ret;
  }

});

Object.defineProperty(JoinClause.prototype, 'or', {
  get: function get() {
    return this._bool('or');
  }
});

exports['default'] = JoinClause;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9xdWVyeS9qb2luY2xhdXNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7c0JBQ3VCLFFBQVE7Ozs7Ozs7QUFPL0IsU0FBUyxVQUFVLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDdkMsTUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7QUFDckIsTUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7QUFDbkIsTUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFDckIsTUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUM7QUFDaEIsTUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUM7Q0FDbkI7O0FBRUQsZUFBTyxVQUFVLENBQUMsU0FBUyxFQUFFOztBQUUzQixVQUFRLEVBQUUsTUFBTTs7O0FBR2hCLElBQUUsRUFBQSxZQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFO0FBQzFCLFFBQUksT0FBTyxLQUFLLEtBQUssVUFBVSxFQUFFO0FBQy9CLFVBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO0FBQ2hCLFlBQUksRUFBRSxXQUFXO0FBQ2pCLGFBQUssRUFBRSxLQUFLO0FBQ1osWUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUU7T0FDbkIsQ0FBQyxDQUFDO0FBQ0gsYUFBTyxJQUFJLENBQUM7S0FDYjs7QUFFRCxRQUFJLElBQUksWUFBQSxDQUFDO0FBQ1QsUUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO0FBQ3pCLFlBQVEsU0FBUyxDQUFDLE1BQU07QUFDdEIsV0FBSyxDQUFDO0FBQUc7QUFDUCxjQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssQ0FBQyxLQUFLLEtBQUssVUFBVSxFQUFFO0FBQ2xFLGdCQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2hDLGdCQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUNYLGdCQUFNLE1BQU0sR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHLE1BQU0sR0FBRyxJQUFJLENBQUE7QUFDNUMsbUJBQU8sRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtBQUN4QixrQkFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUN0QztBQUNELG1CQUFPLElBQUksQ0FBQztXQUNiLE1BQU07QUFDTCxnQkFBSSxHQUFHLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBSixJQUFJLEVBQUMsQ0FBQztXQUM1QztBQUNELGdCQUFNO1NBQ1A7QUFBQSxBQUNELFdBQUssQ0FBQztBQUFHLFlBQUksR0FBRyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFKLElBQUksRUFBQyxDQUFDLEFBQUMsTUFBTTtBQUFBLEFBQzlGO0FBQVMsWUFBSSxHQUFHLEVBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBUixRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUosSUFBSSxFQUFDLENBQUM7QUFBQSxLQUNqRjtBQUNELFFBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3hCLFdBQU8sSUFBSSxDQUFDO0dBQ2I7OztBQUdELE9BQUssRUFBQSxlQUFDLE1BQU0sRUFBRTtBQUNaLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBTixNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDLENBQUM7R0FDekU7OztBQUdELE9BQUssRUFBQSxpQkFBRztBQUNOLFdBQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0dBQ3ZDOzs7QUFHRCxNQUFJLEVBQUEsY0FBQyxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtBQUM1QixXQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7R0FDbkQ7OztBQUdELE1BQUksRUFBQSxjQUFDLEtBQUksRUFBRTtBQUNULFFBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSSxDQUFDO0FBQ3JCLFdBQU8sSUFBSSxDQUFDO0dBQ2I7O0FBRUQsT0FBSyxFQUFBLGVBQUMsSUFBSSxFQUFFO0FBQ1YsUUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtBQUMxQixVQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN0QixhQUFPLElBQUksQ0FBQztLQUNiO0FBQ0QsUUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxLQUFLLENBQUM7QUFDcEMsUUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDdkIsV0FBTyxHQUFHLENBQUM7R0FDWjs7Q0FFRixDQUFDLENBQUE7O0FBRUYsTUFBTSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRTtBQUNoRCxLQUFHLEVBQUMsZUFBRztBQUNMLFdBQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUN6QjtDQUNGLENBQUMsQ0FBQzs7cUJBRVksVUFBVSIsImZpbGUiOiJqb2luY2xhdXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICdsb2Rhc2gnXG5cbi8vIEpvaW5DbGF1c2Vcbi8vIC0tLS0tLS1cblxuLy8gVGhlIFwiSm9pbkNsYXVzZVwiIGlzIGFuIG9iamVjdCBob2xkaW5nIGFueSBuZWNlc3NhcnkgaW5mbyBhYm91dCBhIGpvaW4sXG4vLyBpbmNsdWRpbmcgdGhlIHR5cGUsIGFuZCBhbnkgYXNzb2NpYXRlZCB0YWJsZXMgJiBjb2x1bW5zIGJlaW5nIGpvaW5lZC5cbmZ1bmN0aW9uIEpvaW5DbGF1c2UodGFibGUsIHR5cGUsIHNjaGVtYSkge1xuICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgdGhpcy50YWJsZSA9IHRhYmxlO1xuICB0aGlzLmpvaW5UeXBlID0gdHlwZTtcbiAgdGhpcy5hbmQgPSB0aGlzO1xuICB0aGlzLmNsYXVzZXMgPSBbXTtcbn1cblxuYXNzaWduKEpvaW5DbGF1c2UucHJvdG90eXBlLCB7XG5cbiAgZ3JvdXBpbmc6ICdqb2luJyxcblxuICAvLyBBZGRzIGFuIFwib25cIiBjbGF1c2UgdG8gdGhlIGN1cnJlbnQgam9pbiBvYmplY3QuXG4gIG9uKGZpcnN0LCBvcGVyYXRvciwgc2Vjb25kKSB7XG4gICAgaWYgKHR5cGVvZiBmaXJzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5jbGF1c2VzLnB1c2goe1xuICAgICAgICB0eXBlOiAnb25XcmFwcGVkJyxcbiAgICAgICAgdmFsdWU6IGZpcnN0LFxuICAgICAgICBib29sOiB0aGlzLl9ib29sKClcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbGV0IGRhdGE7XG4gICAgY29uc3QgYm9vbCA9IHRoaXMuX2Jvb2woKVxuICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgICAgY2FzZSAxOiAge1xuICAgICAgICBpZiAodHlwZW9mIGZpcnN0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZmlyc3QudG9TUUwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmlyc3QpO1xuICAgICAgICAgIGxldCBpID0gLTE7XG4gICAgICAgICAgY29uc3QgbWV0aG9kID0gYm9vbCA9PT0gJ29yJyA/ICdvck9uJyA6ICdvbidcbiAgICAgICAgICB3aGlsZSAoKytpIDwga2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXShrZXlzW2ldLCBmaXJzdFtrZXlzW2ldXSlcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGF0YSA9IHt0eXBlOiAnb25SYXcnLCB2YWx1ZTogZmlyc3QsIGJvb2x9O1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAyOiAgZGF0YSA9IHt0eXBlOiAnb25CYXNpYycsIGNvbHVtbjogZmlyc3QsIG9wZXJhdG9yOiAnPScsIHZhbHVlOiBvcGVyYXRvciwgYm9vbH07IGJyZWFrO1xuICAgICAgZGVmYXVsdDogZGF0YSA9IHt0eXBlOiAnb25CYXNpYycsIGNvbHVtbjogZmlyc3QsIG9wZXJhdG9yLCB2YWx1ZTogc2Vjb25kLCBib29sfTtcbiAgICB9XG4gICAgdGhpcy5jbGF1c2VzLnB1c2goZGF0YSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG5cbiAgLy8gQWRkcyBhIFwidXNpbmdcIiBjbGF1c2UgdG8gdGhlIGN1cnJlbnQgam9pbi5cbiAgdXNpbmcoY29sdW1uKSB7XG4gICAgcmV0dXJuIHRoaXMuY2xhdXNlcy5wdXNoKHt0eXBlOiAnb25Vc2luZycsIGNvbHVtbiwgYm9vbDogdGhpcy5fYm9vbCgpfSk7XG4gIH0sXG5cbiAgLy8gQWRkcyBhbiBcImFuZCBvblwiIGNsYXVzZSB0byB0aGUgY3VycmVudCBqb2luIG9iamVjdC5cbiAgYW5kT24oKSB7XG4gICAgcmV0dXJuIHRoaXMub24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSxcblxuICAvLyBBZGRzIGFuIFwib3Igb25cIiBjbGF1c2UgdG8gdGhlIGN1cnJlbnQgam9pbiBvYmplY3QuXG4gIG9yT24oZmlyc3QsIG9wZXJhdG9yLCBzZWNvbmQpIHtcbiAgICByZXR1cm4gdGhpcy5fYm9vbCgnb3InKS5vbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9LFxuXG4gIC8vIEV4cGxpY2l0bHkgc2V0IHRoZSB0eXBlIG9mIGpvaW4sIHVzZWZ1bCB3aXRoaW4gYSBmdW5jdGlvbiB3aGVuIGNyZWF0aW5nIGEgZ3JvdXBlZCBqb2luLlxuICB0eXBlKHR5cGUpIHtcbiAgICB0aGlzLmpvaW5UeXBlID0gdHlwZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICBfYm9vbChib29sKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIHRoaXMuX2Jvb2xGbGFnID0gYm9vbDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCByZXQgPSB0aGlzLl9ib29sRmxhZyB8fCAnYW5kJztcbiAgICB0aGlzLl9ib29sRmxhZyA9ICdhbmQnO1xuICAgIHJldHVybiByZXQ7XG4gIH1cblxufSlcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEpvaW5DbGF1c2UucHJvdG90eXBlLCAnb3InLCB7XG4gIGdldCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Jvb2woJ29yJyk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBKb2luQ2xhdXNlO1xuIl19