
// Oracle Schema Compiler
// -------
'use strict';

exports.__esModule = true;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inherits = require('inherits');

var _inherits2 = _interopRequireDefault(_inherits);

var _schemaCompiler = require('../../../schema/compiler');

var _schemaCompiler2 = _interopRequireDefault(_schemaCompiler);

var _utils = require('../utils');

var utils = _interopRequireWildcard(_utils);

function SchemaCompiler_Oracle() {
  _schemaCompiler2['default'].apply(this, arguments);
}
_inherits2['default'](SchemaCompiler_Oracle, _schemaCompiler2['default']);

// Rename a table on the schema.
SchemaCompiler_Oracle.prototype.renameTable = function (tableName, to) {
  this.pushQuery('rename ' + this.formatter.wrap(tableName) + ' to ' + this.formatter.wrap(to));
};

// Check whether a table exists on the query.
SchemaCompiler_Oracle.prototype.hasTable = function (tableName) {
  this.pushQuery({
    sql: 'select TABLE_NAME from USER_TABLES where TABLE_NAME = ' + this.formatter.parameter(tableName),
    output: function output(resp) {
      return resp.length > 0;
    }
  });
};

// Check whether a column exists on the schema.
SchemaCompiler_Oracle.prototype.hasColumn = function (tableName, column) {
  var sql = 'select COLUMN_NAME from USER_TAB_COLUMNS ' + ('where TABLE_NAME = ' + this.formatter.parameter(tableName) + ' ') + ('and COLUMN_NAME = ' + this.formatter.parameter(column));
  this.pushQuery({ sql: sql, output: function output(resp) {
      return resp.length > 0;
    } });
};

SchemaCompiler_Oracle.prototype.dropSequenceIfExists = function (sequenceName) {
  this.pushQuery(utils.wrapSqlWithCatch('drop sequence ' + this.formatter.wrap(sequenceName), -2289));
};

SchemaCompiler_Oracle.prototype._dropRelatedSequenceIfExists = function (tableName) {
  // removing the sequence that was possibly generated by increments() column
  var sequenceName = utils.generateCombinedName('seq', tableName);
  this.dropSequenceIfExists(sequenceName);
};

SchemaCompiler_Oracle.prototype.dropTable = function (tableName) {
  this.pushQuery('drop table ' + this.formatter.wrap(tableName));

  // removing the sequence that was possibly generated by increments() column
  this._dropRelatedSequenceIfExists(tableName);
};

SchemaCompiler_Oracle.prototype.dropTableIfExists = function (tableName) {
  this.pushQuery(utils.wrapSqlWithCatch('drop table ' + this.formatter.wrap(tableName), -942));

  // removing the sequence that was possibly generated by increments() column
  this._dropRelatedSequenceIfExists(tableName);
};

exports['default'] = SchemaCompiler_Oracle;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9vcmFjbGUvc2NoZW1hL2NvbXBpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O3dCQUdxQixVQUFVOzs7OzhCQUNKLDBCQUEwQjs7OztxQkFDOUIsVUFBVTs7SUFBckIsS0FBSzs7QUFFakIsU0FBUyxxQkFBcUIsR0FBRztBQUMvQiw4QkFBZSxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0NBQ3ZDO0FBQ0Qsc0JBQVMscUJBQXFCLDhCQUFpQixDQUFDOzs7QUFHaEQscUJBQXFCLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUFTLFNBQVMsRUFBRSxFQUFFLEVBQUU7QUFDcEUsTUFBSSxDQUFDLFNBQVMsYUFBVyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBRyxDQUFDO0NBQzFGLENBQUM7OztBQUdGLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBUyxTQUFTLEVBQUU7QUFDN0QsTUFBSSxDQUFDLFNBQVMsQ0FBQztBQUNiLE9BQUcsRUFBRSx3REFBd0QsR0FDM0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ3JDLFVBQU0sRUFBQSxnQkFBQyxJQUFJLEVBQUU7QUFDWCxhQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0tBQ3hCO0dBQ0YsQ0FBQyxDQUFDO0NBQ0osQ0FBQzs7O0FBR0YscUJBQXFCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLFNBQVMsRUFBRSxNQUFNLEVBQUU7QUFDdEUsTUFBTSxHQUFHLEdBQ1AsdUVBQ3NCLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFHLDJCQUN2QyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBRSxDQUFDO0FBQzFELE1BQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxHQUFHLEVBQUgsR0FBRyxFQUFFLE1BQU0sRUFBRSxnQkFBQSxJQUFJO2FBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDO0tBQUEsRUFBRSxDQUFDLENBQUM7Q0FDMUQsQ0FBQzs7QUFFRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxZQUFZLEVBQUU7QUFDN0UsTUFBSSxDQUFDLFNBQVMsQ0FDWixLQUFLLENBQUMsZ0JBQWdCLG9CQUFrQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBSSxDQUFDLElBQUksQ0FBQyxDQUNwRixDQUFDO0NBQ0gsQ0FBQzs7QUFFRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsNEJBQTRCLEdBQUcsVUFBVSxTQUFTLEVBQUU7O0FBRWxGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDbEUsTUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksQ0FBQyxDQUFDO0NBQ3pDLENBQUM7O0FBRUYscUJBQXFCLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFVLFNBQVMsRUFBRTtBQUMvRCxNQUFJLENBQUMsU0FBUyxpQkFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBRyxDQUFDOzs7QUFHL0QsTUFBSSxDQUFDLDRCQUE0QixDQUFDLFNBQVMsQ0FBQyxDQUFDO0NBQzlDLENBQUM7O0FBRUYscUJBQXFCLENBQUMsU0FBUyxDQUFDLGlCQUFpQixHQUFHLFVBQVMsU0FBUyxFQUFFO0FBQ3RFLE1BQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLGdCQUFnQixpQkFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7OztBQUc3RixNQUFJLENBQUMsNEJBQTRCLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDOUMsQ0FBQzs7cUJBRWEscUJBQXFCIiwiZmlsZSI6ImNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vLyBPcmFjbGUgU2NoZW1hIENvbXBpbGVyXG4vLyAtLS0tLS0tXG5pbXBvcnQgaW5oZXJpdHMgZnJvbSAnaW5oZXJpdHMnO1xuaW1wb3J0IFNjaGVtYUNvbXBpbGVyIGZyb20gJy4uLy4uLy4uL3NjaGVtYS9jb21waWxlcic7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuLi91dGlscyc7XG5cbmZ1bmN0aW9uIFNjaGVtYUNvbXBpbGVyX09yYWNsZSgpIHtcbiAgU2NoZW1hQ29tcGlsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmluaGVyaXRzKFNjaGVtYUNvbXBpbGVyX09yYWNsZSwgU2NoZW1hQ29tcGlsZXIpO1xuXG4vLyBSZW5hbWUgYSB0YWJsZSBvbiB0aGUgc2NoZW1hLlxuU2NoZW1hQ29tcGlsZXJfT3JhY2xlLnByb3RvdHlwZS5yZW5hbWVUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlTmFtZSwgdG8pIHtcbiAgdGhpcy5wdXNoUXVlcnkoYHJlbmFtZSAke3RoaXMuZm9ybWF0dGVyLndyYXAodGFibGVOYW1lKX0gdG8gJHt0aGlzLmZvcm1hdHRlci53cmFwKHRvKX1gKTtcbn07XG5cbi8vIENoZWNrIHdoZXRoZXIgYSB0YWJsZSBleGlzdHMgb24gdGhlIHF1ZXJ5LlxuU2NoZW1hQ29tcGlsZXJfT3JhY2xlLnByb3RvdHlwZS5oYXNUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeSh7XG4gICAgc3FsOiAnc2VsZWN0IFRBQkxFX05BTUUgZnJvbSBVU0VSX1RBQkxFUyB3aGVyZSBUQUJMRV9OQU1FID0gJyArXG4gICAgICB0aGlzLmZvcm1hdHRlci5wYXJhbWV0ZXIodGFibGVOYW1lKSxcbiAgICBvdXRwdXQocmVzcCkge1xuICAgICAgcmV0dXJuIHJlc3AubGVuZ3RoID4gMDtcbiAgICB9XG4gIH0pO1xufTtcblxuLy8gQ2hlY2sgd2hldGhlciBhIGNvbHVtbiBleGlzdHMgb24gdGhlIHNjaGVtYS5cblNjaGVtYUNvbXBpbGVyX09yYWNsZS5wcm90b3R5cGUuaGFzQ29sdW1uID0gZnVuY3Rpb24odGFibGVOYW1lLCBjb2x1bW4pIHtcbiAgY29uc3Qgc3FsID1cbiAgICBgc2VsZWN0IENPTFVNTl9OQU1FIGZyb20gVVNFUl9UQUJfQ09MVU1OUyBgICtcbiAgICBgd2hlcmUgVEFCTEVfTkFNRSA9ICR7dGhpcy5mb3JtYXR0ZXIucGFyYW1ldGVyKHRhYmxlTmFtZSl9IGAgK1xuICAgIGBhbmQgQ09MVU1OX05BTUUgPSAke3RoaXMuZm9ybWF0dGVyLnBhcmFtZXRlcihjb2x1bW4pfWA7XG4gIHRoaXMucHVzaFF1ZXJ5KHsgc3FsLCBvdXRwdXQ6IHJlc3AgPT4gcmVzcC5sZW5ndGggPiAwIH0pO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfT3JhY2xlLnByb3RvdHlwZS5kcm9wU2VxdWVuY2VJZkV4aXN0cyA9IGZ1bmN0aW9uIChzZXF1ZW5jZU5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoXG4gICAgdXRpbHMud3JhcFNxbFdpdGhDYXRjaChgZHJvcCBzZXF1ZW5jZSAke3RoaXMuZm9ybWF0dGVyLndyYXAoc2VxdWVuY2VOYW1lKX1gLCAtMjI4OSlcbiAgKTtcbn07XG5cblNjaGVtYUNvbXBpbGVyX09yYWNsZS5wcm90b3R5cGUuX2Ryb3BSZWxhdGVkU2VxdWVuY2VJZkV4aXN0cyA9IGZ1bmN0aW9uICh0YWJsZU5hbWUpIHtcbiAgLy8gcmVtb3ZpbmcgdGhlIHNlcXVlbmNlIHRoYXQgd2FzIHBvc3NpYmx5IGdlbmVyYXRlZCBieSBpbmNyZW1lbnRzKCkgY29sdW1uXG4gIGNvbnN0IHNlcXVlbmNlTmFtZSA9IHV0aWxzLmdlbmVyYXRlQ29tYmluZWROYW1lKCdzZXEnLCB0YWJsZU5hbWUpO1xuICB0aGlzLmRyb3BTZXF1ZW5jZUlmRXhpc3RzKHNlcXVlbmNlTmFtZSk7XG59O1xuXG5TY2hlbWFDb21waWxlcl9PcmFjbGUucHJvdG90eXBlLmRyb3BUYWJsZSA9IGZ1bmN0aW9uICh0YWJsZU5hbWUpIHtcbiAgdGhpcy5wdXNoUXVlcnkoYGRyb3AgdGFibGUgJHt0aGlzLmZvcm1hdHRlci53cmFwKHRhYmxlTmFtZSl9YCk7XG5cbiAgLy8gcmVtb3ZpbmcgdGhlIHNlcXVlbmNlIHRoYXQgd2FzIHBvc3NpYmx5IGdlbmVyYXRlZCBieSBpbmNyZW1lbnRzKCkgY29sdW1uXG4gIHRoaXMuX2Ryb3BSZWxhdGVkU2VxdWVuY2VJZkV4aXN0cyh0YWJsZU5hbWUpO1xufTtcblxuU2NoZW1hQ29tcGlsZXJfT3JhY2xlLnByb3RvdHlwZS5kcm9wVGFibGVJZkV4aXN0cyA9IGZ1bmN0aW9uKHRhYmxlTmFtZSkge1xuICB0aGlzLnB1c2hRdWVyeSh1dGlscy53cmFwU3FsV2l0aENhdGNoKGBkcm9wIHRhYmxlICR7dGhpcy5mb3JtYXR0ZXIud3JhcCh0YWJsZU5hbWUpfWAsIC05NDIpKTtcblxuICAvLyByZW1vdmluZyB0aGUgc2VxdWVuY2UgdGhhdCB3YXMgcG9zc2libHkgZ2VuZXJhdGVkIGJ5IGluY3JlbWVudHMoKSBjb2x1bW5cbiAgdGhpcy5fZHJvcFJlbGF0ZWRTZXF1ZW5jZUlmRXhpc3RzKHRhYmxlTmFtZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTY2hlbWFDb21waWxlcl9PcmFjbGU7XG4iXX0=