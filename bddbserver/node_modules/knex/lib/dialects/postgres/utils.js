'use strict';

exports.__esModule = true;

function dateToString(date) {
  function pad(number, digits) {
    number = number.toString();
    while (number.length < digits) {
      number = '0' + number;
    }
    return number;
  }

  var offset = -date.getTimezoneOffset();
  var ret = pad(date.getFullYear(), 4) + '-' + pad(date.getMonth() + 1, 2) + '-' + pad(date.getDate(), 2) + 'T' + pad(date.getHours(), 2) + ':' + pad(date.getMinutes(), 2) + ':' + pad(date.getSeconds(), 2) + '.' + pad(date.getMilliseconds(), 3);

  if (offset < 0) {
    ret += "-";
    offset *= -1;
  } else {
    ret += "+";
  }

  return ret + pad(Math.floor(offset / 60), 2) + ":" + pad(offset % 60, 2);
}

var prepareObject = undefined;
var arrayString = undefined;

// converts values from javascript types
// to their 'raw' counterparts for use as a postgres parameter
// note: you can override this function to provide your own conversion mechanism
// for complex types, etc...
var prepareValue = function prepareValue(val, seen /*, valueForUndefined*/) {
  if (val instanceof Buffer) {
    return val;
  }
  if (val instanceof Date) {
    return dateToString(val);
  }
  if (Array.isArray(val)) {
    return arrayString(val);
  }
  if (val === null) {
    return null;
  }
  if (typeof val === 'object') {
    return prepareObject(val, seen);
  }
  return val.toString();
};

prepareObject = function prepareObject(val, seen) {
  if (val && typeof val.toPostgres === 'function') {
    seen = seen || [];
    if (seen.indexOf(val) !== -1) {
      throw new Error('circular reference detected while preparing "' + val + '" for query');
    }
    seen.push(val);

    return prepareValue(val.toPostgres(prepareValue), seen);
  }
  return JSON.stringify(val);
};

// convert a JS array to a postgres array literal
// uses comma separator so won't work for types like box that use
// a different array separator.
arrayString = function arrayString(val) {
  return '{' + val.map(function (elem) {
    if (elem === null || elem === undefined) {
      return 'NULL';
    }
    if (Array.isArray(elem)) {
      return arrayString(elem);
    }
    return JSON.stringify(prepareValue(elem));
  }).join(',') + '}';
};

function normalizeQueryConfig(config, values, callback) {
  //can take in strings or config objects
  config = typeof config === 'string' ? { text: config } : config;
  if (values) {
    if (typeof values === 'function') {
      config.callback = values;
    } else {
      config.values = values;
    }
  }
  if (callback) {
    config.callback = callback;
  }
  return config;
}

exports.prepareValue = prepareValue;
exports.normalizeQueryConfig = normalizeQueryConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9wb3N0Z3Jlcy91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsU0FBUyxZQUFZLENBQUMsSUFBSSxFQUFFO0FBQzFCLFdBQVMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUU7QUFDM0IsVUFBTSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUMzQixXQUFPLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxFQUFFO0FBQzdCLFlBQU0sU0FBTyxNQUFNLEFBQUUsQ0FBQztLQUN2QjtBQUNELFdBQU8sTUFBTSxDQUFDO0dBQ2Y7O0FBRUQsTUFBSSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQztBQUN2QyxNQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FDeEMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQzdCLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUMvQixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FDL0IsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQzs7QUFFakMsTUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFO0FBQ2QsT0FBRyxJQUFJLEdBQUcsQ0FBQztBQUNYLFVBQU0sSUFBSSxDQUFDLENBQUMsQ0FBQztHQUNk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QUN4QjtHQUNGO0FBQ0QsTUFBSSxRQUFRLEVBQUU7QUFDWixVQUFNLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztHQUM1QjtBQUNELFNBQU8sTUFBTSxDQUFDO0NBQ2Y7O1FBRVEsWUFBWSxHQUFaLFlBQVk7UUFBRSxvQkFBb0IsR0FBcEIsb0JBQW9CIiwiZmlsZSI6InV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5mdW5jdGlvbiBkYXRlVG9TdHJpbmcoZGF0ZSkge1xuICBmdW5jdGlvbiBwYWQobnVtYmVyLCBkaWdpdHMpIHtcbiAgICBudW1iZXIgPSBudW1iZXIudG9TdHJpbmcoKTtcbiAgICB3aGlsZSAobnVtYmVyLmxlbmd0aCA8IGRpZ2l0cykge1xuICAgICAgbnVtYmVyID0gYDAke251bWJlcn1gO1xuICAgIH1cbiAgICByZXR1cm4gbnVtYmVyO1xuICB9XG5cbiAgbGV0IG9mZnNldCA9IC1kYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG4gIGxldCByZXQgPSBwYWQoZGF0ZS5nZXRGdWxsWWVhcigpLCA0KSArICctJyArXG4gICAgcGFkKGRhdGUuZ2V0TW9udGgoKSArIDEsIDIpICsgJy0nICtcbiAgICBwYWQoZGF0ZS5nZXREYXRlKCksIDIpICsgJ1QnICtcbiAgICBwYWQoZGF0ZS5nZXRIb3VycygpLCAyKSArICc6JyArXG4gICAgcGFkKGRhdGUuZ2V0TWludXRlcygpLCAyKSArICc6JyArXG4gICAgcGFkKGRhdGUuZ2V0U2Vjb25kcygpLCAyKSArICcuJyArXG4gICAgcGFkKGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksIDMpO1xuXG4gIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgcmV0ICs9IFwiLVwiO1xuICAgIG9mZnNldCAqPSAtMTtcbiAgfSBlbHNlIHtcbiAgICByZXQgKz0gXCIrXCI7XG4gIH1cblxuICByZXR1cm4gcmV0ICsgcGFkKE1hdGguZmxvb3Iob2Zmc2V0IC8gNjApLCAyKSArIFwiOlwiICsgcGFkKG9mZnNldCAlIDYwLCAyKTtcbn1cblxubGV0IHByZXBhcmVPYmplY3Q7XG5sZXQgYXJyYXlTdHJpbmc7XG5cbi8vIGNvbnZlcnRzIHZhbHVlcyBmcm9tIGphdmFzY3JpcHQgdHlwZXNcbi8vIHRvIHRoZWlyICdyYXcnIGNvdW50ZXJwYXJ0cyBmb3IgdXNlIGFzIGEgcG9zdGdyZXMgcGFyYW1ldGVyXG4vLyBub3RlOiB5b3UgY2FuIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gdG8gcHJvdmlkZSB5b3VyIG93biBjb252ZXJzaW9uIG1lY2hhbmlzbVxuLy8gZm9yIGNvbXBsZXggdHlwZXMsIGV0Yy4uLlxuY29uc3QgcHJlcGFyZVZhbHVlID0gZnVuY3Rpb24gKHZhbCwgc2VlbiAvKiwgdmFsdWVGb3JVbmRlZmluZWQqLykge1xuICBpZiAodmFsIGluc3RhbmNlb2YgQnVmZmVyKSB7XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuICBpZiAodmFsIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiBkYXRlVG9TdHJpbmcodmFsKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgcmV0dXJuIGFycmF5U3RyaW5nKHZhbCk7XG4gIH1cbiAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBwcmVwYXJlT2JqZWN0KHZhbCwgc2Vlbik7XG4gIH1cbiAgcmV0dXJuIHZhbC50b1N0cmluZygpO1xufTtcblxucHJlcGFyZU9iamVjdCA9IGZ1bmN0aW9uIHByZXBhcmVPYmplY3QodmFsLCBzZWVuKSB7XG4gIGlmICh2YWwgJiYgdHlwZW9mIHZhbC50b1Bvc3RncmVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2VlbiA9IHNlZW4gfHwgW107XG4gICAgaWYgKHNlZW4uaW5kZXhPZih2YWwpICE9PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBjaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgd2hpbGUgcHJlcGFyaW5nIFwiJHt2YWx9XCIgZm9yIHF1ZXJ5YCk7XG4gICAgfVxuICAgIHNlZW4ucHVzaCh2YWwpO1xuXG4gICAgcmV0dXJuIHByZXBhcmVWYWx1ZSh2YWwudG9Qb3N0Z3JlcyhwcmVwYXJlVmFsdWUpLCBzZWVuKTtcbiAgfVxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsKTtcbn07XG5cbi8vIGNvbnZlcnQgYSBKUyBhcnJheSB0byBhIHBvc3RncmVzIGFycmF5IGxpdGVyYWxcbi8vIHVzZXMgY29tbWEgc2VwYXJhdG9yIHNvIHdvbid0IHdvcmsgZm9yIHR5cGVzIGxpa2UgYm94IHRoYXQgdXNlXG4vLyBhIGRpZmZlcmVudCBhcnJheSBzZXBhcmF0b3IuXG5hcnJheVN0cmluZyA9IGZ1bmN0aW9uIGFycmF5U3RyaW5nKHZhbCkge1xuICByZXR1cm4gJ3snICsgdmFsLm1hcChmdW5jdGlvbiAoZWxlbSkge1xuICAgIGlmIChlbGVtID09PSBudWxsIHx8IGVsZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICdOVUxMJztcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWxlbSkpIHtcbiAgICAgIHJldHVybiBhcnJheVN0cmluZyhlbGVtKTtcbiAgICB9XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHByZXBhcmVWYWx1ZShlbGVtKSk7XG4gIH0pLmpvaW4oJywnKSArICd9Jztcbn07XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVF1ZXJ5Q29uZmlnKGNvbmZpZywgdmFsdWVzLCBjYWxsYmFjaykge1xuICAvL2NhbiB0YWtlIGluIHN0cmluZ3Mgb3IgY29uZmlnIG9iamVjdHNcbiAgY29uZmlnID0gKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSA/IHsgdGV4dDogY29uZmlnIH0gOiBjb25maWc7XG4gIGlmICh2YWx1ZXMpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uZmlnLmNhbGxiYWNrID0gdmFsdWVzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25maWcudmFsdWVzID0gdmFsdWVzO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBjb25maWcuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgfVxuICByZXR1cm4gY29uZmlnO1xufVxuXG5leHBvcnQgeyBwcmVwYXJlVmFsdWUsIG5vcm1hbGl6ZVF1ZXJ5Q29uZmlnIH07XG4iXX0=