
// MySQL Column Compiler
// -------
'use strict';

exports.__esModule = true;

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _inherits = require('inherits');

var _inherits2 = _interopRequireDefault(_inherits);

var _schemaColumncompiler = require('../../../schema/columncompiler');

var _schemaColumncompiler2 = _interopRequireDefault(_schemaColumncompiler);

var _helpers = require('../../../helpers');

var helpers = _interopRequireWildcard(_helpers);

var _lodash = require('lodash');

function ColumnCompiler_MSSQL() {
  _schemaColumncompiler2['default'].apply(this, arguments);
  this.modifiers = ['nullable', 'defaultTo', 'first', 'after', 'comment'];
}
_inherits2['default'](ColumnCompiler_MSSQL, _schemaColumncompiler2['default']);

// Types
// ------

_lodash.assign(ColumnCompiler_MSSQL.prototype, {

  increments: 'int identity(1,1) not null primary key',

  bigincrements: 'bigint identity(1,1) not null primary key',

  bigint: 'bigint',

  double: function double(precision, scale) {
    if (!precision) return 'decimal';
    return 'decimal(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';
  },

  floating: function floating(precision, scale) {
    if (!precision) return 'decimal';
    return 'decimal(' + this._num(precision, 8) + ', ' + this._num(scale, 2) + ')';
  },

  integer: function integer(length) {
    length = length ? '(' + this._num(length, 11) + ')' : '';
    return 'int' + length;
  },

  mediumint: 'int',

  smallint: 'smallint',

  tinyint: function tinyint(length) {
    length = length ? '(' + this._num(length, 1) + ')' : '';
    return 'tinyint' + length;
  },

  varchar: function varchar(length) {
    return 'nvarchar(' + this._num(length, 255) + ')';
  },

  text: 'nvarchar(max)',

  mediumtext: 'nvarchar(max)',

  longtext: 'nvarchar(max)',

  enu: 'nvarchar(100)',

  uuid: 'uniqueidentifier',

  datetime: 'datetime',

  timestamp: 'datetime',

  bit: function bit(length) {
    if (length > 1) {
      helpers.warn('Bit field is exactly 1 bit length for MSSQL');
    }
    return 'bit';
  },

  binary: function binary(length) {
    return length ? 'varbinary(' + this._num(length) + ')' : 'varbinary(max)';
  },

  bool: 'bit',

  // Modifiers
  // ------

  defaultTo: function defaultTo(value) {
    var defaultVal = ColumnCompiler_MSSQL.super_.prototype.defaultTo.apply(this, arguments);
    if (this.type !== 'blob' && this.type.indexOf('text') === -1) {
      return defaultVal;
    }
    return '';
  },

  first: function first() {
    helpers.warn('Column first modifier not available for MSSQL');
    return '';
  },

  after: function after(column) {
    helpers.warn('Column after modifier not available for MSSQL');
    return '';
  },

  comment: function comment(_comment) {
    if (_comment && _comment.length > 255) {
      helpers.warn('Your comment is longer than the max comment length for MSSQL');
    }
    return '';
  }

});

exports['default'] = ColumnCompiler_MSSQL;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kaWFsZWN0cy9tc3NxbC9zY2hlbWEvY29sdW1uY29tcGlsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7d0JBR3FCLFVBQVU7Ozs7b0NBQ0osZ0NBQWdDOzs7O3VCQUNsQyxrQkFBa0I7O0lBQS9CLE9BQU87O3NCQUVJLFFBQVE7O0FBRS9CLFNBQVMsb0JBQW9CLEdBQUc7QUFDOUIsb0NBQWUsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUN0QyxNQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFBO0NBQ3hFO0FBQ0Qsc0JBQVMsb0JBQW9CLG9DQUFpQixDQUFDOzs7OztBQUsvQyxlQUFPLG9CQUFvQixDQUFDLFNBQVMsRUFBRTs7QUFFckMsWUFBVSxFQUFFLHdDQUF3Qzs7QUFFcEQsZUFBYSxFQUFFLDJDQUEyQzs7QUFFMUQsUUFBTSxFQUFFLFFBQVE7O0FBRWhCLFFBQU0sRUFBQSxnQkFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFO0FBQ3ZCLFFBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxTQUFTLENBQUE7QUFDaEMsd0JBQWtCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxVQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFHO0dBQ3JFOztBQUVELFVBQVEsRUFBQSxrQkFBQyxTQUFTLEVBQUUsS0FBSyxFQUFFO0FBQ3pCLFFBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxTQUFTLENBQUE7QUFDaEMsd0JBQWtCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxVQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFHO0dBQ3JFOztBQUVELFNBQU8sRUFBQSxpQkFBQyxNQUFNLEVBQUU7QUFDZCxVQUFNLEdBQUcsTUFBTSxTQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxTQUFNLEVBQUUsQ0FBQTtBQUNuRCxtQkFBYSxNQUFNLENBQUU7R0FDdEI7O0FBRUQsV0FBUyxFQUFFLEtBQUs7O0FBRWhCLFVBQVEsRUFBRSxVQUFVOztBQUVwQixTQUFPLEVBQUEsaUJBQUMsTUFBTSxFQUFFO0FBQ2QsVUFBTSxHQUFHLE1BQU0sU0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsU0FBTSxFQUFFLENBQUE7QUFDbEQsdUJBQWlCLE1BQU0sQ0FBRTtHQUMxQjs7QUFFRCxTQUFPLEVBQUEsaUJBQUMsTUFBTSxFQUFFO0FBQ2QseUJBQW1CLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFJO0dBQzlDOztBQUVELE1BQUksRUFBRSxlQUFlOztBQUVyQixZQUFVLEVBQUUsZUFBZTs7QUFFM0IsVUFBUSxFQUFFLGVBQWU7O0FBRXpCLEtBQUcsRUFBRSxlQUFlOztBQUVwQixNQUFJLEVBQUUsa0JBQWtCOztBQUV4QixVQUFRLEVBQUUsVUFBVTs7QUFFcEIsV0FBUyxFQUFFLFVBQVU7O0FBRXJCLEtBQUcsRUFBQSxhQUFDLE1BQU0sRUFBRTtBQUNWLFFBQUksTUFBTSxHQUFHLENBQUMsRUFBRTtBQUNkLGFBQU8sQ0FBQyxJQUFJLENBQUMsNkNBQTZDLENBQUMsQ0FBQztLQUM3RDtBQUNELFdBQU8sS0FBSyxDQUFDO0dBQ2Q7O0FBRUQsUUFBTSxFQUFBLGdCQUFDLE1BQU0sRUFBRTtBQUNiLFdBQU8sTUFBTSxrQkFBZ0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBTSxnQkFBZ0IsQ0FBQTtHQUNyRTs7QUFFRCxNQUFJLEVBQUUsS0FBSzs7Ozs7QUFLWCxXQUFTLEVBQUEsbUJBQUMsS0FBSyxFQUFFO0FBQ2YsUUFBTSxVQUFVLEdBQUcsb0JBQW9CLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMxRixRQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzVELGFBQU8sVUFBVSxDQUFBO0tBQ2xCO0FBQ0QsV0FBTyxFQUFFLENBQUE7R0FDVjs7QUFFRCxPQUFLLEVBQUEsaUJBQUc7QUFDTixXQUFPLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDOUQsV0FBTyxFQUFFLENBQUM7R0FDWDs7QUFFRCxPQUFLLEVBQUEsZUFBQyxNQUFNLEVBQUU7QUFDWixXQUFPLENBQUMsSUFBSSxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDOUQsV0FBTyxFQUFFLENBQUM7R0FDWDs7QUFFRCxTQUFPLEVBQUEsaUJBQUMsUUFBTyxFQUFFO0FBQ2YsUUFBSSxRQUFPLElBQUksUUFBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7QUFDbkMsYUFBTyxDQUFDLElBQUksQ0FBQyw4REFBOEQsQ0FBQyxDQUFBO0tBQzdFO0FBQ0QsV0FBTyxFQUFFLENBQUE7R0FDVjs7Q0FFRixDQUFDLENBQUE7O3FCQUVhLG9CQUFvQiIsImZpbGUiOiJjb2x1bW5jb21waWxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gTXlTUUwgQ29sdW1uIENvbXBpbGVyXG4vLyAtLS0tLS0tXG5pbXBvcnQgaW5oZXJpdHMgZnJvbSAnaW5oZXJpdHMnO1xuaW1wb3J0IENvbHVtbkNvbXBpbGVyIGZyb20gJy4uLy4uLy4uL3NjaGVtYS9jb2x1bW5jb21waWxlcic7XG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJy4uLy4uLy4uL2hlbHBlcnMnO1xuXG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICdsb2Rhc2gnXG5cbmZ1bmN0aW9uIENvbHVtbkNvbXBpbGVyX01TU1FMKCkge1xuICBDb2x1bW5Db21waWxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB0aGlzLm1vZGlmaWVycyA9IFsnbnVsbGFibGUnLCAnZGVmYXVsdFRvJywgJ2ZpcnN0JywgJ2FmdGVyJywgJ2NvbW1lbnQnXVxufVxuaW5oZXJpdHMoQ29sdW1uQ29tcGlsZXJfTVNTUUwsIENvbHVtbkNvbXBpbGVyKTtcblxuLy8gVHlwZXNcbi8vIC0tLS0tLVxuXG5hc3NpZ24oQ29sdW1uQ29tcGlsZXJfTVNTUUwucHJvdG90eXBlLCB7XG5cbiAgaW5jcmVtZW50czogJ2ludCBpZGVudGl0eSgxLDEpIG5vdCBudWxsIHByaW1hcnkga2V5JyxcblxuICBiaWdpbmNyZW1lbnRzOiAnYmlnaW50IGlkZW50aXR5KDEsMSkgbm90IG51bGwgcHJpbWFyeSBrZXknLFxuXG4gIGJpZ2ludDogJ2JpZ2ludCcsXG5cbiAgZG91YmxlKHByZWNpc2lvbiwgc2NhbGUpIHtcbiAgICBpZiAoIXByZWNpc2lvbikgcmV0dXJuICdkZWNpbWFsJ1xuICAgIHJldHVybiBgZGVjaW1hbCgke3RoaXMuX251bShwcmVjaXNpb24sIDgpfSwgJHt0aGlzLl9udW0oc2NhbGUsIDIpfSlgXG4gIH0sXG5cbiAgZmxvYXRpbmcocHJlY2lzaW9uLCBzY2FsZSkge1xuICAgIGlmICghcHJlY2lzaW9uKSByZXR1cm4gJ2RlY2ltYWwnXG4gICAgcmV0dXJuIGBkZWNpbWFsKCR7dGhpcy5fbnVtKHByZWNpc2lvbiwgOCl9LCAke3RoaXMuX251bShzY2FsZSwgMil9KWBcbiAgfSxcblxuICBpbnRlZ2VyKGxlbmd0aCkge1xuICAgIGxlbmd0aCA9IGxlbmd0aCA/IGAoJHt0aGlzLl9udW0obGVuZ3RoLCAxMSl9KWAgOiAnJ1xuICAgIHJldHVybiBgaW50JHtsZW5ndGh9YFxuICB9LFxuXG4gIG1lZGl1bWludDogJ2ludCcsXG5cbiAgc21hbGxpbnQ6ICdzbWFsbGludCcsXG5cbiAgdGlueWludChsZW5ndGgpIHtcbiAgICBsZW5ndGggPSBsZW5ndGggPyBgKCR7dGhpcy5fbnVtKGxlbmd0aCwgMSl9KWAgOiAnJ1xuICAgIHJldHVybiBgdGlueWludCR7bGVuZ3RofWBcbiAgfSxcblxuICB2YXJjaGFyKGxlbmd0aCkge1xuICAgIHJldHVybiBgbnZhcmNoYXIoJHt0aGlzLl9udW0obGVuZ3RoLCAyNTUpfSlgO1xuICB9LFxuXG4gIHRleHQ6ICdudmFyY2hhcihtYXgpJyxcblxuICBtZWRpdW10ZXh0OiAnbnZhcmNoYXIobWF4KScsXG5cbiAgbG9uZ3RleHQ6ICdudmFyY2hhcihtYXgpJyxcblxuICBlbnU6ICdudmFyY2hhcigxMDApJyxcblxuICB1dWlkOiAndW5pcXVlaWRlbnRpZmllcicsXG5cbiAgZGF0ZXRpbWU6ICdkYXRldGltZScsXG5cbiAgdGltZXN0YW1wOiAnZGF0ZXRpbWUnLFxuXG4gIGJpdChsZW5ndGgpIHtcbiAgICBpZiAobGVuZ3RoID4gMSkge1xuICAgICAgaGVscGVycy53YXJuKCdCaXQgZmllbGQgaXMgZXhhY3RseSAxIGJpdCBsZW5ndGggZm9yIE1TU1FMJyk7XG4gICAgfVxuICAgIHJldHVybiAnYml0JztcbiAgfSxcblxuICBiaW5hcnkobGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxlbmd0aCA/IGB2YXJiaW5hcnkoJHt0aGlzLl9udW0obGVuZ3RoKX0pYCA6ICd2YXJiaW5hcnkobWF4KSdcbiAgfSxcblxuICBib29sOiAnYml0JyxcblxuICAvLyBNb2RpZmllcnNcbiAgLy8gLS0tLS0tXG5cbiAgZGVmYXVsdFRvKHZhbHVlKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbCA9IENvbHVtbkNvbXBpbGVyX01TU1FMLnN1cGVyXy5wcm90b3R5cGUuZGVmYXVsdFRvLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHRoaXMudHlwZSAhPT0gJ2Jsb2InICYmIHRoaXMudHlwZS5pbmRleE9mKCd0ZXh0JykgPT09IC0xKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFZhbFxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSxcblxuICBmaXJzdCgpIHtcbiAgICBoZWxwZXJzLndhcm4oJ0NvbHVtbiBmaXJzdCBtb2RpZmllciBub3QgYXZhaWxhYmxlIGZvciBNU1NRTCcpO1xuICAgIHJldHVybiAnJztcbiAgfSxcblxuICBhZnRlcihjb2x1bW4pIHtcbiAgICBoZWxwZXJzLndhcm4oJ0NvbHVtbiBhZnRlciBtb2RpZmllciBub3QgYXZhaWxhYmxlIGZvciBNU1NRTCcpO1xuICAgIHJldHVybiAnJztcbiAgfSxcblxuICBjb21tZW50KGNvbW1lbnQpIHtcbiAgICBpZiAoY29tbWVudCAmJiBjb21tZW50Lmxlbmd0aCA+IDI1NSkge1xuICAgICAgaGVscGVycy53YXJuKCdZb3VyIGNvbW1lbnQgaXMgbG9uZ2VyIHRoYW4gdGhlIG1heCBjb21tZW50IGxlbmd0aCBmb3IgTVNTUUwnKVxuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfVxuXG59KVxuXG5leHBvcnQgZGVmYXVsdCBDb2x1bW5Db21waWxlcl9NU1NRTDtcbiJdfQ==