'use strict';

var _lodash = require('lodash');

var inherits = require('inherits');
var Oracle_Formatter = require('../oracle/formatter');
var BlobHelper = require('./utils').BlobHelper;

function Oracledb_Formatter(client) {
  Oracle_Formatter.call(this, client);
}
inherits(Oracledb_Formatter, Oracle_Formatter);

_lodash.assign(Oracledb_Formatter.prototype, {

  // Checks whether a value is a function... if it is, we compile it
  // otherwise we check whether it's a raw
  parameter: function parameter(value) {
    if (typeof value === 'function') {
      return this.outputQuery(this.compileCallback(value), true);
    } else if (value instanceof BlobHelper) {
      return 'EMPTY_BLOB()';
    }
    return this.unwrapRaw(value, true) || '?';
  }

});

module.exports = Oracledb_Formatter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kaWFsZWN0cy9vcmFjbGVkYi9mb3JtYXR0ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7c0JBSXFCLFFBQVE7O0FBSjdCLElBQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNyQyxJQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ3hELElBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLENBQUM7O0FBSWpELFNBQVMsa0JBQWtCLENBQUMsTUFBTSxFQUFFO0FBQ2xDLGtCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7Q0FDckM7QUFDRCxRQUFRLENBQUMsa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzs7QUFFL0MsZUFBTyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUU7Ozs7QUFJbkMsV0FBUyxFQUFFLFNBQVMsU0FBUyxDQUFDLEtBQUssRUFBRTtBQUNuQyxRQUFJLE9BQU8sS0FBSyxLQUFLLFVBQVUsRUFBRTtBQUMvQixhQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztLQUM1RCxNQUFNLElBQUksS0FBSyxZQUFZLFVBQVUsRUFBRTtBQUN0QyxhQUFPLGNBQWMsQ0FBQztLQUN2QjtBQUNELFdBQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDO0dBQzNDOztDQUVGLENBQUMsQ0FBQzs7QUFFSCxNQUFNLENBQUMsT0FBTyxHQUFHLGtCQUFrQixDQUFDIiwiZmlsZSI6ImZvcm1hdHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKTtcbmNvbnN0IE9yYWNsZV9Gb3JtYXR0ZXIgPSByZXF1aXJlKCcuLi9vcmFjbGUvZm9ybWF0dGVyJyk7XG5jb25zdCBCbG9iSGVscGVyID0gcmVxdWlyZSgnLi91dGlscycpLkJsb2JIZWxwZXI7XG5cbmltcG9ydCB7YXNzaWdufSBmcm9tICdsb2Rhc2gnO1xuXG5mdW5jdGlvbiBPcmFjbGVkYl9Gb3JtYXR0ZXIoY2xpZW50KSB7XG4gIE9yYWNsZV9Gb3JtYXR0ZXIuY2FsbCh0aGlzLCBjbGllbnQpO1xufVxuaW5oZXJpdHMoT3JhY2xlZGJfRm9ybWF0dGVyLCBPcmFjbGVfRm9ybWF0dGVyKTtcblxuYXNzaWduKE9yYWNsZWRiX0Zvcm1hdHRlci5wcm90b3R5cGUsIHtcblxuICAvLyBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIGEgZnVuY3Rpb24uLi4gaWYgaXQgaXMsIHdlIGNvbXBpbGUgaXRcbiAgLy8gb3RoZXJ3aXNlIHdlIGNoZWNrIHdoZXRoZXIgaXQncyBhIHJhd1xuICBwYXJhbWV0ZXI6IGZ1bmN0aW9uIHBhcmFtZXRlcih2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiB0aGlzLm91dHB1dFF1ZXJ5KHRoaXMuY29tcGlsZUNhbGxiYWNrKHZhbHVlKSwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEJsb2JIZWxwZXIpIHtcbiAgICAgIHJldHVybiAnRU1QVFlfQkxPQigpJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudW53cmFwUmF3KHZhbHVlLCB0cnVlKSB8fCAnPyc7XG4gIH1cblxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gT3JhY2xlZGJfRm9ybWF0dGVyO1xuIl19